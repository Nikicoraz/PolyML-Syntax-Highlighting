{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "PolyML",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#characters"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#wordOperators"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#languageFunctions"
		},
		{
			"include": "#types"
		},
		{
			"include": "#functionCalls"
		},
		{
			"include": "#languageClasses"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [{
				"name": "keyword.control.poly",
				"match": "\\b(if|then|else|datatype|type|val|let|in|end|as|handle|raise|of|match|case|sig|signature|struct|structure|rec|fn|exception|op)\\b"
			}]
		},
		"strings": {
			"name": "string.quoted.double.poly",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.poly",
					"match": "\\\\."
				}
			]
		},
		"comments": {
			"name": "comment.block.poly",
			"begin": "\\(\\*",
			"end": "\\*\\)"
		},
		"characters": {
			"begin": "\\#\"",
			"end": "\"",
			"name": "constant.character.poly"
		},
		"constants": {
			"name": "constant.language.poly",
			"match": "\\b(true|false|nil|_|SOME|NONE)\\b"
		},
		"wordOperators": {
			"name": "keyword.operator.poly",
			"match": "\\b(andalso|orelse|not|mod)\\b"
		},
		"operators": {
			"name": "keyword.operator.poly",
			"match": "(=|\\+|~|-|\\*|\\^|::|:|@|<|>|<=|>=)"
		},
		"functions": {
			"name": "meta.function.poly",
			"begin": "(\\bfun|^\\s*\\|)\\s+([^=>][a-zA-Z_][a-zA-Z0-9_]*)",
			"end": "(?:\\(|?:\\s[a-zA-Z0-9_\"\\#])",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.poly"
				},
				"2": {
					"name": "entity.name.function.poly"
				}
			}
		},
		"types": {
			"name": "storage.type.poly",
			"match": "(\\b(int|string|char|list|real|bool)\\b|('{1,2}[a-z]))"
		},
		"languageFunctions": {
			"name": "support.function.poly",
			"match": "\\b(tl|hd|str|real |chr|ord|trunc|round|ceil|floor|explode|implode|null)\\b"
		},
		"languageClasses":{
			"name": "support.class.poly",
			"match": "\\b(TextIO|Int|Real)\\b"
		},
		"functionCalls": {
			"name": "entity.name.function.poly",
			"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\("
		}
	},
	"fileTypes": [
		".sml",
		".poly"
	],
	"scopeName": "source.poly"
}